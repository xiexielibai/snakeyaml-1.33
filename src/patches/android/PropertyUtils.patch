Index: src/main/java/org/yaml/snakeyaml/introspector/PropertyUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/yaml/snakeyaml/introspector/PropertyUtils.java b/src/main/java/org/yaml/snakeyaml/introspector/PropertyUtils.java
--- a/src/main/java/org/yaml/snakeyaml/introspector/PropertyUtils.java	(revision 7bce50d0dddaff7d9313189860ed8f372252e3f6)
+++ b/src/main/java/org/yaml/snakeyaml/introspector/PropertyUtils.java	(date 1662970435472)
@@ -13,12 +13,7 @@
  */
 package org.yaml.snakeyaml.introspector;

-import java.beans.FeatureDescriptor;
-import java.beans.IntrospectionException;
-import java.beans.Introspector;
-import java.beans.PropertyDescriptor;
 import java.lang.reflect.Field;
-import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Collection;
 import java.util.HashMap;
@@ -65,58 +60,19 @@
     }

     Map<String, Property> properties = new LinkedHashMap<String, Property>();
-    boolean inaccessableFieldsExist = false;
-    if (bAccess == BeanAccess.FIELD) {
-      for (Class<?> c = type; c != null; c = c.getSuperclass()) {
-        for (Field field : c.getDeclaredFields()) {
-          int modifiers = field.getModifiers();
-          if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers)
-              && !properties.containsKey(field.getName())) {
-            properties.put(field.getName(), new FieldProperty(field));
-          }
-        }
-      }
-    } else {// add JavaBean properties
-      try {
-        for (PropertyDescriptor property : Introspector.getBeanInfo(type)
-            .getPropertyDescriptors()) {
-          Method readMethod = property.getReadMethod();
-          if ((readMethod == null || !readMethod.getName().equals("getClass"))
-              && !isTransient(property)) {
-            properties.put(property.getName(), new MethodProperty(property));
-          }
-        }
-      } catch (IntrospectionException e) {
-        throw new YAMLException(e);
-      }
-
-      // add public fields
-      for (Class<?> c = type; c != null; c = c.getSuperclass()) {
-        for (Field field : c.getDeclaredFields()) {
-          int modifiers = field.getModifiers();
-          if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers)) {
-            if (Modifier.isPublic(modifiers)) {
-              properties.put(field.getName(), new FieldProperty(field));
-            } else {
-              inaccessableFieldsExist = true;
-            }
-          }
+    for (Class<?> c = type; c != null; c = c.getSuperclass()) {
+      for (Field field : c.getDeclaredFields()) {
+        int modifiers = field.getModifiers();
+        if (!Modifier.isStatic(modifiers) && !Modifier.isTransient(modifiers)
+            && !properties.containsKey(field.getName())) {
+          properties.put(field.getName(), new FieldProperty(field));
         }
       }
     }
-    if (properties.isEmpty() && inaccessableFieldsExist) {
-      throw new YAMLException("No JavaBean properties found in " + type.getName());
-    }
     propertiesCache.put(type, properties);
     return properties;
   }

-  private static final String TRANSIENT = "transient";
-
-  private boolean isTransient(FeatureDescriptor fd) {
-    return Boolean.TRUE.equals(fd.getValue(TRANSIENT));
-  }
-
   public Set<Property> getProperties(Class<? extends Object> type) {
     return getProperties(type, beanAccess);
   }
